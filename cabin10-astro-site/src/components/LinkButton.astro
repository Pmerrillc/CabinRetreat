---
interface Props {
  buttonStyle: string;
  link: string;
  externalLink: boolean;
  submitButton?: boolean;
  fullWidth?: boolean;
  hideOnMobile?: boolean;
  hideOnDesktop?: boolean;
}

const {
  buttonStyle,
  submitButton,
  fullWidth,
  link,
  externalLink,
  hideOnMobile,
  hideOnDesktop,
}: Props = Astro.props;

const buttonWidth = fullWidth ? "full-width" : "content-width";
const mobileVisibility = hideOnMobile ? "hide-on-mobile" : null;
const desktopVisibility = hideOnDesktop ? "hide-on-desktop" : null;

const buttonType = submitButton
  ? submitButton
    ? "submit"
    : "button"
  : "button";
---

{
  externalLink ? (
    <a
      href={link}
      type={buttonType}
      class:list={[
        "button",
        `${buttonStyle}-button`,
        buttonWidth,
        mobileVisibility,
        desktopVisibility,
      ]}
      target="_blank"
      rel="noopener noreferrer"
    >
      <slot />
      <slot name="icon" />
    </a>
  ) : (
    <a
      href={link}
      type={buttonType}
      class:list={[
        "button",
        `${buttonStyle}-button`,
        buttonWidth,
        mobileVisibility,
        desktopVisibility,
      ]}
    >
      <slot />
      <slot name="icon" />
    </a>
  )
}
<style>
  .button {
    display: flex;
    padding: 12px;
    align-items: center;
    text-align: center;
    justify-content: center;
    width: 100%;
    transition: background-color 0.2s ease;
    transition: color 0.2s ease;
  }
  .button:hover {
    transition: background-color 0.2s ease;
    font-weight: 500;
  }

  .primary-button {
    background-color: var(--light-green);
    color: black;
    transition: background-color 0.2s ease;
  }

  .secondary-button {
    background-color: var(--dark-green);
    color: white;
  }

  .special-button {
    background-color: white;
    color: black;
    border: 0.5px solid black;
  }
  .full-width {
    width: 100%;
  }
  .content-width {
    width: max-content;
  }
</style>
