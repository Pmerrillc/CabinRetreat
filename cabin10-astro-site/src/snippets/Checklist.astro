---
import { Icon } from "astro-icon/components";

interface Props {
  textList: string[];
}

const { textList }: Props = Astro.props;
---

<div class="container">
  {
    textList.map((text, index) => {
      return (
        <span class:list={["list-item", `span-${index}`]}>
          <Icon id="check" name="check" size={24} />
          <h6 class="inter-light"> {text}</h6>
        </span>
      );
    })
  }
</div>
<style>
  .list-item {
    display: flex;
    flex-direction: row;
    gap: 8px;
  }

  @media only screen and (min-width: 481px) {
    .container {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      grid-template-rows: repeat(2, 1fr);
      grid-column-gap: 4px;
      grid-row-gap: 8px;
      padding-top: 8px;
    }
    .span-1 {
      grid-area: 1 / 1 / 2 / 2;
    }
    .span-2 {
      grid-area: 1 / 2 / 2 / 3;
    }
    .span-3 {
      grid-area: 1 / 3 / 2 / 4;
    }
    .span-4 {
      grid-area: 2 / 1 / 3 / 2;
    }
    .span-5 {
      grid-area: 2 / 2 / 3 / 3;
    }
    .span-6 {
      grid-area: 2 / 3 / 3 / 4;
    }
  }
  @media only screen and (min-width: 789px) {
    .container {
      grid-column-gap: 16px;
      grid-row-gap: 32px;
      padding-top: 16px;
    }
  }
  @media only screen and (min-width: 1200px) {
    .container {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      grid-template-rows: repeat(3, 1fr);
      grid-column-gap: 8px;
      grid-row-gap: 8px;
    }

    .span-1 {
      grid-area: 1 / 1 / 2 / 2;
    }
    .span-2 {
      grid-area: 1 / 2 / 2 / 3;
    }
    .span-3 {
      grid-area: 2 / 1 / 3 / 2;
    }
    .span-4 {
      grid-area: 2 / 2 / 3 / 3;
    }
    .span-5 {
      grid-area: 3 / 1 / 4 / 2;
    }
    .span-6 {
      grid-area: 3 / 2 / 4 / 3;
    }
  }
</style>
